beer <- window(ausbeer,start=)
# Load the required libraries
library(fpp3)
install.packages("fpp3")
# Load the required libraries
library(fpp3)
# Subset the data correctly
beer <- window(ausbeer, start = c(1992, 1))
library(fpp3)
# Load ausbeer dataset directly from the package
beer <- window(fpp3::ausbeer, start = c(1992, 1))
install.packages("fpp2")
library(fpp2)
# Load ausbeer dataset from fpp2
beer <- window(fpp2::ausbeer, start = c(1992, 1))
# Apply seasonal naive forecasting
fc <- snaive(beer)
# Plot the forecast
autoplot(fc)
# Check residuals
checkresiduals(fc)
library(MASS)
View(Boston)
? Boston
#1
library(ggplot2)
ggp <- ggplot(Boston, aes(lstat, medv)) +geom_point()
ggp    # Pour tracer les points
#=============================================================
#2
y<-Boston$medv
x<-Boston$lstat
model_lm<-lm(y~x)
summary(model_lm)
#the second method
beta_1_hat <- cov(x,y)/var(x)
beta_1_hat
beta_0_hat <- mean(y) - mean(x)*beta_1_hat
beta_0_hat #meme valeurs que dans lm !
R2<-cor(x,y)^2 #meme resultat
R2
# Nuage de point et droite de régression
plot(x,y,main="medv en fonction de lstat",xlab="lstat",ylab="medv")
abline(model_lm,col="red",lwd=2) #pour tracer la droite des moindres carres
legend("topright", legend=c("--- Droite Moindres Carrés"),
text.col=c("red"))
#=============================================================
#3
coefficient_corr<-cor(x,y)
coefficient_corr
# les predictions sont hat{y}_i = hat{beta}_0 + hat{beta}_1*x_i
y_hat <- beta_0_hat + beta_1_hat*x
R2 <- var(y_hat) / var(y)
R2
#=============================================================
#4
install.packages("robusTest")
library(robusTest)
cortest(x,y)
#=============================================================
#5
y_hat<-fitted(model_lm)
y_hat
#=============================================================
#6
e_hat<-resid(model_lm)
e_hat
#histogramme des residu
hist(e_hat,freq=FALSE,col="yellow")
# Boxplot des résidus du modèle 5
boxplot(e_hat,col="yellow", main="Boîte à moustache des résidus")
#le nuage de ponts des residus en fonction de x
plot(e_hat~x)
abline(0,0, lwd=2)
abline(2*SD(e_hat), 0, lwd=2, col="blue")
library(MASS)
SD=function(x)
{
SD=sqrt(var(x)*(length(x)-1)/length(x))
return(SD)
}
View(Boston)
? Boston
#1
library(ggplot2)
ggp <- ggplot(Boston, aes(lstat, medv)) +geom_point()
ggp    # Pour tracer les points
#=============================================================
#2
y<-Boston$medv
x<-Boston$lstat
model_lm<-lm(y~x)
summary(model_lm)
#the second method
beta_1_hat <- cov(x,y)/var(x)
beta_1_hat
beta_0_hat <- mean(y) - mean(x)*beta_1_hat
beta_0_hat #meme valeurs que dans lm !
R2<-cor(x,y)^2 #meme resultat
R2
# Nuage de point et droite de régression
plot(x,y,main="medv en fonction de lstat",xlab="lstat",ylab="medv")
abline(model_lm,col="red",lwd=2) #pour tracer la droite des moindres carres
legend("topright", legend=c("--- Droite Moindres Carrés"),
text.col=c("red"))
#=============================================================
#3
coefficient_corr<-cor(x,y)
coefficient_corr
# les predictions sont hat{y}_i = hat{beta}_0 + hat{beta}_1*x_i
y_hat <- beta_0_hat + beta_1_hat*x
R2 <- var(y_hat) / var(y)
R2
#=============================================================
#4
install.packages("robusTest")
library(robusTest)
cortest(x,y)
#=============================================================
#5
y_hat<-fitted(model_lm)
y_hat
#=============================================================
#6
e_hat<-resid(model_lm)
e_hat
#histogramme des residu
hist(e_hat,freq=FALSE,col="yellow")
# Boxplot des résidus du modèle 5
boxplot(e_hat,col="yellow", main="Boîte à moustache des résidus")
#le nuage de ponts des residus en fonction de x
plot(e_hat~x)
abline(0,0, lwd=2)
abline(2*SD(e_hat), 0, lwd=2, col="blue")
abline(-2*SD(e_hat), 0, lwd=2, col="blue")
#=============================================================
#7
new_x <- data.frame(x = 5)
new_x
pred<-predict(model_lm,newdata=new_x)
pred
#=============================================================
#8
# 1. Create a new categorical variable for lstat with six categories
lstat_cat <- cut(x, breaks = c(-Inf, 5, 10, 15, 20, 25, Inf),
labels = c("<=5", "5-10", "10-15", "15-20", "20-25", ">25"))
lstat_cat
# 2. Calculate the mean of y (medv) for each category
mean_y_per_cat <- tapply(y, lstat_cat, mean)
mean_y_per_cat
plot(x, y, main = "Regressogram of medv based on lstat categories",
xlab = "lstat", ylab = "medv", col = "lightblue", pch = 16)
points(c(2.5, 7.5, 12.5, 17.5, 22.5, 27.5), mean_y_per_cat, col = "red", pch = 16)
lines(c(2.5, 7.5, 12.5, 17.5, 22.5, 27.5), mean_y_per_cat, col = "red", type = "s", lwd = 2)
#=============================================================
#9
##Ajustement polynomial d'ordre 2
odel_poly2<-lm(y~x+I(x^2))
summary(model_poly2)
install.packages("robusTest")
library(MASS)
SD=function(x)
{
SD=sqrt(var(x)*(length(x)-1)/length(x))
return(SD)
}
View(Boston)
? Boston
#1
library(ggplot2)
ggp <- ggplot(Boston, aes(lstat, medv)) +geom_point()
ggp    # Pour tracer les points
#=============================================================
#2
y<-Boston$medv
x<-Boston$lstat
model_lm<-lm(y~x)
summary(model_lm)
#the second method
beta_1_hat <- cov(x,y)/var(x)
beta_1_hat
beta_0_hat <- mean(y) - mean(x)*beta_1_hat
beta_0_hat #meme valeurs que dans lm !
R2<-cor(x,y)^2 #meme resultat
R2
# Nuage de point et droite de régression
plot(x,y,main="medv en fonction de lstat",xlab="lstat",ylab="medv")
abline(model_lm,col="red",lwd=2) #pour tracer la droite des moindres carres
legend("topright", legend=c("--- Droite Moindres Carrés"),
text.col=c("red"))
#=============================================================
#3
coefficient_corr<-cor(x,y)
coefficient_corr
# les predictions sont hat{y}_i = hat{beta}_0 + hat{beta}_1*x_i
y_hat <- beta_0_hat + beta_1_hat*x
R2 <- var(y_hat) / var(y)
R2
#=============================================================
#4
install.packages("robusTest")
library(robusTest)
cortest(x,y)
#=============================================================
#5
y_hat<-fitted(model_lm)
y_hat
#=============================================================
#6
e_hat<-resid(model_lm)
e_hat
#histogramme des residu
hist(e_hat,freq=FALSE,col="yellow")
# Boxplot des résidus du modèle 5
boxplot(e_hat,col="yellow", main="Boîte à moustache des résidus")
#le nuage de ponts des residus en fonction de x
plot(e_hat~x)
abline(0,0, lwd=2)
abline(2*SD(e_hat), 0, lwd=2, col="blue")
abline(-2*SD(e_hat), 0, lwd=2, col="blue")
#=============================================================
#7
new_x <- data.frame(x = 5)
new_x
pred<-predict(model_lm,newdata=new_x)
pred
#=============================================================
#8
# 1. Create a new categorical variable for lstat with six categories
lstat_cat <- cut(x, breaks = c(-Inf, 5, 10, 15, 20, 25, Inf),
labels = c("<=5", "5-10", "10-15", "15-20", "20-25", ">25"))
lstat_cat
# 2. Calculate the mean of y (medv) for each category
mean_y_per_cat <- tapply(y, lstat_cat, mean)
mean_y_per_cat
plot(x, y, main = "Regressogram of medv based on lstat categories",
xlab = "lstat", ylab = "medv", col = "lightblue", pch = 16)
points(c(2.5, 7.5, 12.5, 17.5, 22.5, 27.5), mean_y_per_cat, col = "red", pch = 16)
lines(c(2.5, 7.5, 12.5, 17.5, 22.5, 27.5), mean_y_per_cat, col = "red", type = "s", lwd = 2)
#=============================================================
#9
##Ajustement polynomial d'ordre 2
odel_poly2<-lm(y~x+I(x^2))
summary(model_poly2)
library(MASS)
SD=function(x)
{
SD=sqrt(var(x)*(length(x)-1)/length(x))
return(SD)
}
View(Boston)
? Boston
#1
library(ggplot2)
ggp <- ggplot(Boston, aes(lstat, medv)) +geom_point()
ggp    # Pour tracer les points
#=============================================================
#2
y<-Boston$medv
x<-Boston$lstat
model_lm<-lm(y~x)
summary(model_lm)
#the second method
beta_1_hat <- cov(x,y)/var(x)
beta_1_hat
beta_0_hat <- mean(y) - mean(x)*beta_1_hat
beta_0_hat #meme valeurs que dans lm !
R2<-cor(x,y)^2 #meme resultat
R2
# Nuage de point et droite de régression
plot(x,y,main="medv en fonction de lstat",xlab="lstat",ylab="medv")
abline(model_lm,col="red",lwd=2) #pour tracer la droite des moindres carres
legend("topright", legend=c("--- Droite Moindres Carrés"),
text.col=c("red"))
#=============================================================
#3
coefficient_corr<-cor(x,y)
coefficient_corr
# les predictions sont hat{y}_i = hat{beta}_0 + hat{beta}_1*x_i
y_hat <- beta_0_hat + beta_1_hat*x
R2 <- var(y_hat) / var(y)
R2
#=============================================================
#4
install.packages("robusTest")
library(robusTest)
cortest(x,y)
#=============================================================
#5
y_hat<-fitted(model_lm)
y_hat
#=============================================================
#6
e_hat<-resid(model_lm)
e_hat
#histogramme des residu
hist(e_hat,freq=FALSE,col="yellow")
# Boxplot des résidus du modèle 5
boxplot(e_hat,col="yellow", main="Boîte à moustache des résidus")
#le nuage de ponts des residus en fonction de x
plot(e_hat~x)
abline(0,0, lwd=2)
abline(2*SD(e_hat), 0, lwd=2, col="blue")
abline(-2*SD(e_hat), 0, lwd=2, col="blue")
#=============================================================
#7
new_x <- data.frame(x = 5)
new_x
pred<-predict(model_lm,newdata=new_x)
pred
#=============================================================
#8
# 1. Create a new categorical variable for lstat with six categories
lstat_cat <- cut(x, breaks = c(-Inf, 5, 10, 15, 20, 25, Inf),
labels = c("<=5", "5-10", "10-15", "15-20", "20-25", ">25"))
lstat_cat
# 2. Calculate the mean of y (medv) for each category
mean_y_per_cat <- tapply(y, lstat_cat, mean)
mean_y_per_cat
plot(x, y, main = "Regressogram of medv based on lstat categories",
xlab = "lstat", ylab = "medv", col = "lightblue", pch = 16)
points(c(2.5, 7.5, 12.5, 17.5, 22.5, 27.5), mean_y_per_cat, col = "red", pch = 16)
lines(c(2.5, 7.5, 12.5, 17.5, 22.5, 27.5), mean_y_per_cat, col = "red", type = "s", lwd = 2)
#=============================================================
#9
##Ajustement polynomial d'ordre 2
odel_poly2<-lm(y~x+I(x^2))
summary(model_poly2)
install.packages("model_poly2")
library(forecast)
# Example time series data
series_list <- list(usnetelec, usgdp, mcopper, enplanements)
library(forecast)
data("ausbeer")
install.packages("remotes")
remotes::install_github("robjhyndman/expsmooth")
plot(ausgdp,main="Australian GDP per capita",ylab="dollars",xlab="Year")
install.packages("reticulate")
shiny::runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
library(reticulate)
py_config()
runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
runApp('MLSD/WEB/tp_python_r')
shiny::runApp("MLSD/WEB/tp_python_r")
library(reticulate)
use_python("C:/Users/mlsd2/AppData/Local/Programs/Python/Python314/python.exe")
virtualenv_list()           # Ensure "myenv" is listed
use_virtualenv("myenv")
virtualenv_remove("myenv")
virtualenv_create("myenv")
runApp('MLSD/WEB/tp')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
